<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="403"><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.25%)</title><rect x="0.4963%" y="549" width="0.2481%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="1"/><text x="0.7463%" y="559.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.25%)</title><rect x="0.4963%" y="533" width="0.2481%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.7463%" y="543.50"></text></g><g><title>tcache_get (1 samples, 0.25%)</title><rect x="0.4963%" y="517" width="0.2481%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.7463%" y="527.50"></text></g><g><title>__x64_sys_sendto (4 samples, 0.99%)</title><rect x="0.9926%" y="453" width="0.9926%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="4"/><text x="1.2426%" y="463.50"></text></g><g><title>__sys_sendto (4 samples, 0.99%)</title><rect x="0.9926%" y="437" width="0.9926%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="4"/><text x="1.2426%" y="447.50"></text></g><g><title>inet_sendmsg (3 samples, 0.74%)</title><rect x="1.2407%" y="421" width="0.7444%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="3"/><text x="1.4907%" y="431.50"></text></g><g><title>udp_sendmsg (3 samples, 0.74%)</title><rect x="1.2407%" y="405" width="0.7444%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="3"/><text x="1.4907%" y="415.50"></text></g><g><title>udp_send_skb (3 samples, 0.74%)</title><rect x="1.2407%" y="389" width="0.7444%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="3"/><text x="1.4907%" y="399.50"></text></g><g><title>ip_send_skb (3 samples, 0.74%)</title><rect x="1.2407%" y="373" width="0.7444%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="3"/><text x="1.4907%" y="383.50"></text></g><g><title>ip_output (3 samples, 0.74%)</title><rect x="1.2407%" y="357" width="0.7444%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="3"/><text x="1.4907%" y="367.50"></text></g><g><title>ip_finish_output (3 samples, 0.74%)</title><rect x="1.2407%" y="341" width="0.7444%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="3"/><text x="1.4907%" y="351.50"></text></g><g><title>__ip_finish_output (3 samples, 0.74%)</title><rect x="1.2407%" y="325" width="0.7444%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="3"/><text x="1.4907%" y="335.50"></text></g><g><title>ip_finish_output2 (3 samples, 0.74%)</title><rect x="1.2407%" y="309" width="0.7444%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="3"/><text x="1.4907%" y="319.50"></text></g><g><title>neigh_hh_output (3 samples, 0.74%)</title><rect x="1.2407%" y="293" width="0.7444%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="3"/><text x="1.4907%" y="303.50"></text></g><g><title>__dev_queue_xmit (3 samples, 0.74%)</title><rect x="1.2407%" y="277" width="0.7444%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="3"/><text x="1.4907%" y="287.50"></text></g><g><title>__local_bh_enable_ip (3 samples, 0.74%)</title><rect x="1.2407%" y="261" width="0.7444%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="3"/><text x="1.4907%" y="271.50"></text></g><g><title>do_softirq.part.0 (3 samples, 0.74%)</title><rect x="1.2407%" y="245" width="0.7444%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="3"/><text x="1.4907%" y="255.50"></text></g><g><title>__do_softirq (2 samples, 0.50%)</title><rect x="1.4888%" y="229" width="0.4963%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="2"/><text x="1.7388%" y="239.50"></text></g><g><title>net_rx_action (2 samples, 0.50%)</title><rect x="1.4888%" y="213" width="0.4963%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="2"/><text x="1.7388%" y="223.50"></text></g><g><title>__napi_poll (2 samples, 0.50%)</title><rect x="1.4888%" y="197" width="0.4963%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="2"/><text x="1.7388%" y="207.50"></text></g><g><title>process_backlog (2 samples, 0.50%)</title><rect x="1.4888%" y="181" width="0.4963%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="2"/><text x="1.7388%" y="191.50"></text></g><g><title>__netif_receive_skb (2 samples, 0.50%)</title><rect x="1.4888%" y="165" width="0.4963%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="2"/><text x="1.7388%" y="175.50"></text></g><g><title>__netif_receive_skb_one_core (2 samples, 0.50%)</title><rect x="1.4888%" y="149" width="0.4963%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="2"/><text x="1.7388%" y="159.50"></text></g><g><title>ip_rcv (2 samples, 0.50%)</title><rect x="1.4888%" y="133" width="0.4963%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="2"/><text x="1.7388%" y="143.50"></text></g><g><title>ip_local_deliver (2 samples, 0.50%)</title><rect x="1.4888%" y="117" width="0.4963%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="2"/><text x="1.7388%" y="127.50"></text></g><g><title>ip_local_deliver_finish (2 samples, 0.50%)</title><rect x="1.4888%" y="101" width="0.4963%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="2"/><text x="1.7388%" y="111.50"></text></g><g><title>ip_protocol_deliver_rcu (2 samples, 0.50%)</title><rect x="1.4888%" y="85" width="0.4963%" height="15" fill="rgb(225,111,53)" fg:x="6" fg:w="2"/><text x="1.7388%" y="95.50"></text></g><g><title>udp_rcv (2 samples, 0.50%)</title><rect x="1.4888%" y="69" width="0.4963%" height="15" fill="rgb(238,160,17)" fg:x="6" fg:w="2"/><text x="1.7388%" y="79.50"></text></g><g><title>__udp4_lib_rcv (2 samples, 0.50%)</title><rect x="1.4888%" y="53" width="0.4963%" height="15" fill="rgb(214,148,48)" fg:x="6" fg:w="2"/><text x="1.7388%" y="63.50"></text></g><g><title>__icmp_send (1 samples, 0.25%)</title><rect x="1.7370%" y="37" width="0.2481%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="1"/><text x="1.9870%" y="47.50"></text></g><g><title>_ZN13esp_vtx_gs_rs4main28_$u7b$$u7b$closure$u7d$$u7d$17hfaaabb2cecc5196aE.llvm.5485522086393543559 (5 samples, 1.24%)</title><rect x="0.9926%" y="533" width="1.2407%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="5"/><text x="1.2426%" y="543.50"></text></g><g><title>std::sys_common::net::UdpSocket::send_to (5 samples, 1.24%)</title><rect x="0.9926%" y="517" width="1.2407%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="5"/><text x="1.2426%" y="527.50"></text></g><g><title>__libc_sendto (5 samples, 1.24%)</title><rect x="0.9926%" y="501" width="1.2407%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="5"/><text x="1.2426%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 1.24%)</title><rect x="0.9926%" y="485" width="1.2407%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="5"/><text x="1.2426%" y="495.50"></text></g><g><title>do_syscall_64 (5 samples, 1.24%)</title><rect x="0.9926%" y="469" width="1.2407%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="5"/><text x="1.2426%" y="479.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.25%)</title><rect x="1.9851%" y="453" width="0.2481%" height="15" fill="rgb(233,36,39)" fg:x="8" fg:w="1"/><text x="2.2351%" y="463.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.25%)</title><rect x="1.9851%" y="437" width="0.2481%" height="15" fill="rgb(226,3,54)" fg:x="8" fg:w="1"/><text x="2.2351%" y="447.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.25%)</title><rect x="1.9851%" y="421" width="0.2481%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="1"/><text x="2.2351%" y="431.50"></text></g><g><title>schedule (1 samples, 0.25%)</title><rect x="1.9851%" y="405" width="0.2481%" height="15" fill="rgb(238,167,29)" fg:x="8" fg:w="1"/><text x="2.2351%" y="415.50"></text></g><g><title>__schedule (1 samples, 0.25%)</title><rect x="1.9851%" y="389" width="0.2481%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="2.2351%" y="399.50"></text></g><g><title>prepare_task_switch (1 samples, 0.25%)</title><rect x="1.9851%" y="373" width="0.2481%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="2.2351%" y="383.50"></text></g><g><title>__perf_event_task_sched_out (1 samples, 0.25%)</title><rect x="1.9851%" y="357" width="0.2481%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="2.2351%" y="367.50"></text></g><g><title>perf_event_context_sched_out (1 samples, 0.25%)</title><rect x="1.9851%" y="341" width="0.2481%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="1"/><text x="2.2351%" y="351.50"></text></g><g><title>perf_ctx_disable (1 samples, 0.25%)</title><rect x="1.9851%" y="325" width="0.2481%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="1"/><text x="2.2351%" y="335.50"></text></g><g><title>x86_pmu_disable (1 samples, 0.25%)</title><rect x="1.9851%" y="309" width="0.2481%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="1"/><text x="2.2351%" y="319.50"></text></g><g><title>amd_pmu_disable_all (1 samples, 0.25%)</title><rect x="1.9851%" y="293" width="0.2481%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="1"/><text x="2.2351%" y="303.50"></text></g><g><title>amd_pmu_check_overflow (1 samples, 0.25%)</title><rect x="1.9851%" y="277" width="0.2481%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="1"/><text x="2.2351%" y="287.50"></text></g><g><title>amd_pmu_test_overflow_topbit (1 samples, 0.25%)</title><rect x="1.9851%" y="261" width="0.2481%" height="15" fill="rgb(250,191,14)" fg:x="8" fg:w="1"/><text x="2.2351%" y="271.50"></text></g><g><title>native_read_msr (1 samples, 0.25%)</title><rect x="1.9851%" y="245" width="0.2481%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="1"/><text x="2.2351%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.25%)</title><rect x="2.2333%" y="533" width="0.2481%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="1"/><text x="2.4833%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.25%)</title><rect x="2.2333%" y="517" width="0.2481%" height="15" fill="rgb(225,35,8)" fg:x="9" fg:w="1"/><text x="2.4833%" y="527.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.25%)</title><rect x="2.4814%" y="517" width="0.2481%" height="15" fill="rgb(250,213,24)" fg:x="10" fg:w="1"/><text x="2.7314%" y="527.50"></text></g><g><title>esp_vtx_gs_rs::CapHandler::process_air2ground_packets (9 samples, 2.23%)</title><rect x="0.7444%" y="549" width="2.2333%" height="15" fill="rgb(247,123,22)" fg:x="3" fg:w="9"/><text x="0.9944%" y="559.50">e..</text></g><g><title>esp_vtx_gs_rs::Frame::get_jpegdata (2 samples, 0.50%)</title><rect x="2.4814%" y="533" width="0.4963%" height="15" fill="rgb(231,138,38)" fg:x="10" fg:w="2"/><text x="2.7314%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.25%)</title><rect x="2.7295%" y="517" width="0.2481%" height="15" fill="rgb(231,145,46)" fg:x="11" fg:w="1"/><text x="2.9795%" y="527.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17hde5956d82760e928E.llvm.840880353876214762 (1 samples, 0.25%)</title><rect x="2.7295%" y="501" width="0.2481%" height="15" fill="rgb(251,118,11)" fg:x="11" fg:w="1"/><text x="2.9795%" y="511.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.25%)</title><rect x="2.7295%" y="485" width="0.2481%" height="15" fill="rgb(217,147,25)" fg:x="11" fg:w="1"/><text x="2.9795%" y="495.50"></text></g><g><title>_int_realloc (1 samples, 0.25%)</title><rect x="2.7295%" y="469" width="0.2481%" height="15" fill="rgb(247,81,37)" fg:x="11" fg:w="1"/><text x="2.9795%" y="479.50"></text></g><g><title>_int_free (1 samples, 0.25%)</title><rect x="2.7295%" y="453" width="0.2481%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="1"/><text x="2.9795%" y="463.50"></text></g><g><title>__GI___libc_free (1 samples, 0.25%)</title><rect x="3.9702%" y="533" width="0.2481%" height="15" fill="rgb(227,1,9)" fg:x="16" fg:w="1"/><text x="4.2202%" y="543.50"></text></g><g><title>_int_free (1 samples, 0.25%)</title><rect x="3.9702%" y="517" width="0.2481%" height="15" fill="rgb(248,47,43)" fg:x="16" fg:w="1"/><text x="4.2202%" y="527.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.25%)</title><rect x="4.2184%" y="533" width="0.2481%" height="15" fill="rgb(221,10,30)" fg:x="17" fg:w="1"/><text x="4.4684%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (3 samples, 0.74%)</title><rect x="4.4665%" y="533" width="0.7444%" height="15" fill="rgb(210,229,1)" fg:x="18" fg:w="3"/><text x="4.7165%" y="543.50"></text></g><g><title>alloc::collections::btree::remove::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (3 samples, 0.74%)</title><rect x="4.4665%" y="517" width="0.7444%" height="15" fill="rgb(222,148,37)" fg:x="18" fg:w="3"/><text x="4.7165%" y="527.50"></text></g><g><title>__libc_calloc (1 samples, 0.25%)</title><rect x="5.4591%" y="517" width="0.2481%" height="15" fill="rgb(234,67,33)" fg:x="22" fg:w="1"/><text x="5.7091%" y="527.50"></text></g><g><title>esp_vtx_gs_rs::CapHandler::process_block_with_fix_buffer (12 samples, 2.98%)</title><rect x="2.9777%" y="549" width="2.9777%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="12"/><text x="3.2277%" y="559.50">esp..</text></g><g><title>zfec_rs::Fec::decode (3 samples, 0.74%)</title><rect x="5.2109%" y="533" width="0.7444%" height="15" fill="rgb(247,138,52)" fg:x="21" fg:w="3"/><text x="5.4609%" y="543.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.25%)</title><rect x="5.7072%" y="517" width="0.2481%" height="15" fill="rgb(213,79,30)" fg:x="23" fg:w="1"/><text x="5.9572%" y="527.50"></text></g><g><title>mpt_interrupt (1 samples, 0.25%)</title><rect x="7.6923%" y="405" width="0.2481%" height="15" fill="rgb(246,177,23)" fg:x="31" fg:w="1"/><text x="7.9423%" y="415.50"></text></g><g><title>asm_common_interrupt (2 samples, 0.50%)</title><rect x="7.6923%" y="501" width="0.4963%" height="15" fill="rgb(230,62,27)" fg:x="31" fg:w="2"/><text x="7.9423%" y="511.50"></text></g><g><title>common_interrupt (2 samples, 0.50%)</title><rect x="7.6923%" y="485" width="0.4963%" height="15" fill="rgb(216,154,8)" fg:x="31" fg:w="2"/><text x="7.9423%" y="495.50"></text></g><g><title>__common_interrupt (2 samples, 0.50%)</title><rect x="7.6923%" y="469" width="0.4963%" height="15" fill="rgb(244,35,45)" fg:x="31" fg:w="2"/><text x="7.9423%" y="479.50"></text></g><g><title>handle_fasteoi_irq (2 samples, 0.50%)</title><rect x="7.6923%" y="453" width="0.4963%" height="15" fill="rgb(251,115,12)" fg:x="31" fg:w="2"/><text x="7.9423%" y="463.50"></text></g><g><title>handle_irq_event (2 samples, 0.50%)</title><rect x="7.6923%" y="437" width="0.4963%" height="15" fill="rgb(240,54,50)" fg:x="31" fg:w="2"/><text x="7.9423%" y="447.50"></text></g><g><title>__handle_irq_event_percpu (2 samples, 0.50%)</title><rect x="7.6923%" y="421" width="0.4963%" height="15" fill="rgb(233,84,52)" fg:x="31" fg:w="2"/><text x="7.9423%" y="431.50"></text></g><g><title>usb_hcd_irq (1 samples, 0.25%)</title><rect x="7.9404%" y="405" width="0.2481%" height="15" fill="rgb(207,117,47)" fg:x="32" fg:w="1"/><text x="8.1904%" y="415.50"></text></g><g><title>ehci_irq (1 samples, 0.25%)</title><rect x="7.9404%" y="389" width="0.2481%" height="15" fill="rgb(249,43,39)" fg:x="32" fg:w="1"/><text x="8.1904%" y="399.50"></text></g><g><title>_int_malloc (7 samples, 1.74%)</title><rect x="7.4442%" y="517" width="1.7370%" height="15" fill="rgb(209,38,44)" fg:x="30" fg:w="7"/><text x="7.6942%" y="527.50"></text></g><g><title>malloc_consolidate (4 samples, 0.99%)</title><rect x="8.1886%" y="501" width="0.9926%" height="15" fill="rgb(236,212,23)" fg:x="33" fg:w="4"/><text x="8.4386%" y="511.50"></text></g><g><title>__GI___libc_malloc (8 samples, 1.99%)</title><rect x="7.4442%" y="533" width="1.9851%" height="15" fill="rgb(242,79,21)" fg:x="30" fg:w="8"/><text x="7.6942%" y="543.50">_..</text></g><g><title>tcache_get (1 samples, 0.25%)</title><rect x="9.1811%" y="517" width="0.2481%" height="15" fill="rgb(211,96,35)" fg:x="37" fg:w="1"/><text x="9.4311%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.50%)</title><rect x="9.4293%" y="533" width="0.4963%" height="15" fill="rgb(253,215,40)" fg:x="38" fg:w="2"/><text x="9.6793%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.25%)</title><rect x="9.9256%" y="533" width="0.2481%" height="15" fill="rgb(211,81,21)" fg:x="40" fg:w="1"/><text x="10.1756%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.74%)</title><rect x="10.1737%" y="533" width="0.7444%" height="15" fill="rgb(208,190,38)" fg:x="41" fg:w="3"/><text x="10.4237%" y="543.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17hf53c192d430d9694E.llvm.18066530080999219783 (2 samples, 0.50%)</title><rect x="10.4218%" y="517" width="0.4963%" height="15" fill="rgb(235,213,38)" fg:x="42" fg:w="2"/><text x="10.6718%" y="527.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.25%)</title><rect x="10.6700%" y="501" width="0.2481%" height="15" fill="rgb(237,122,38)" fg:x="43" fg:w="1"/><text x="10.9200%" y="511.50"></text></g><g><title>&lt;radiotap::RadiotapIteratorIntoIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.25%)</title><rect x="12.9032%" y="501" width="0.2481%" height="15" fill="rgb(244,218,35)" fg:x="52" fg:w="1"/><text x="13.1532%" y="511.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.50%)</title><rect x="13.1514%" y="453" width="0.4963%" height="15" fill="rgb(240,68,47)" fg:x="53" fg:w="2"/><text x="13.4014%" y="463.50"></text></g><g><title>&lt;radiotap::field::Header as radiotap::field::Field&gt;::from_bytes (6 samples, 1.49%)</title><rect x="13.1514%" y="501" width="1.4888%" height="15" fill="rgb(210,16,53)" fg:x="53" fg:w="6"/><text x="13.4014%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 1.49%)</title><rect x="13.1514%" y="485" width="1.4888%" height="15" fill="rgb(235,124,12)" fg:x="53" fg:w="6"/><text x="13.4014%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 1.49%)</title><rect x="13.1514%" y="469" width="1.4888%" height="15" fill="rgb(224,169,11)" fg:x="53" fg:w="6"/><text x="13.4014%" y="479.50"></text></g><g><title>__GI___libc_realloc (4 samples, 0.99%)</title><rect x="13.6476%" y="453" width="0.9926%" height="15" fill="rgb(250,166,2)" fg:x="55" fg:w="4"/><text x="13.8976%" y="463.50"></text></g><g><title>_int_realloc (2 samples, 0.50%)</title><rect x="14.1439%" y="437" width="0.4963%" height="15" fill="rgb(242,216,29)" fg:x="57" fg:w="2"/><text x="14.3939%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.25%)</title><rect x="14.3921%" y="421" width="0.2481%" height="15" fill="rgb(230,116,27)" fg:x="58" fg:w="1"/><text x="14.6421%" y="431.50"></text></g><g><title>esp_vtx_gs_rs::CapHandler::process_cap_packets (36 samples, 8.93%)</title><rect x="5.9553%" y="549" width="8.9330%" height="15" fill="rgb(228,99,48)" fg:x="24" fg:w="36"/><text x="6.2053%" y="559.50">esp_vtx_gs_rs..</text></g><g><title>radiotap::Radiotap::from_bytes (16 samples, 3.97%)</title><rect x="10.9181%" y="533" width="3.9702%" height="15" fill="rgb(253,11,6)" fg:x="44" fg:w="16"/><text x="11.1681%" y="543.50">radi..</text></g><g><title>radiotap::Radiotap::parse (9 samples, 2.23%)</title><rect x="12.6551%" y="517" width="2.2333%" height="15" fill="rgb(247,143,39)" fg:x="51" fg:w="9"/><text x="12.9051%" y="527.50">r..</text></g><g><title>__GI___libc_malloc (1 samples, 0.25%)</title><rect x="14.6402%" y="501" width="0.2481%" height="15" fill="rgb(236,97,10)" fg:x="59" fg:w="1"/><text x="14.8902%" y="511.50"></text></g><g><title>tcache_get (1 samples, 0.25%)</title><rect x="14.6402%" y="485" width="0.2481%" height="15" fill="rgb(233,208,19)" fg:x="59" fg:w="1"/><text x="14.8902%" y="495.50"></text></g><g><title>[libpcap.so.1.10.1] (1 samples, 0.25%)</title><rect x="15.1365%" y="485" width="0.2481%" height="15" fill="rgb(216,164,2)" fg:x="61" fg:w="1"/><text x="15.3865%" y="495.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.25%)</title><rect x="15.1365%" y="469" width="0.2481%" height="15" fill="rgb(220,129,5)" fg:x="61" fg:w="1"/><text x="15.3865%" y="479.50"></text></g><g><title>_copy_from_user (2 samples, 0.50%)</title><rect x="15.3846%" y="405" width="0.4963%" height="15" fill="rgb(242,17,10)" fg:x="62" fg:w="2"/><text x="15.6346%" y="415.50"></text></g><g><title>eventfd_poll (1 samples, 0.25%)</title><rect x="16.3772%" y="389" width="0.2481%" height="15" fill="rgb(242,107,0)" fg:x="66" fg:w="1"/><text x="16.6272%" y="399.50"></text></g><g><title>packet_poll (1 samples, 0.25%)</title><rect x="16.6253%" y="389" width="0.2481%" height="15" fill="rgb(251,28,31)" fg:x="67" fg:w="1"/><text x="16.8753%" y="399.50"></text></g><g><title>__irqentry_text_start (1 samples, 0.25%)</title><rect x="17.1216%" y="325" width="0.2481%" height="15" fill="rgb(233,223,10)" fg:x="69" fg:w="1"/><text x="17.3716%" y="335.50"></text></g><g><title>update_cfs_group (1 samples, 0.25%)</title><rect x="17.3697%" y="277" width="0.2481%" height="15" fill="rgb(215,21,27)" fg:x="70" fg:w="1"/><text x="17.6197%" y="287.50"></text></g><g><title>dequeue_task (2 samples, 0.50%)</title><rect x="17.3697%" y="325" width="0.4963%" height="15" fill="rgb(232,23,21)" fg:x="70" fg:w="2"/><text x="17.6197%" y="335.50"></text></g><g><title>dequeue_task_fair (2 samples, 0.50%)</title><rect x="17.3697%" y="309" width="0.4963%" height="15" fill="rgb(244,5,23)" fg:x="70" fg:w="2"/><text x="17.6197%" y="319.50"></text></g><g><title>dequeue_entity (2 samples, 0.50%)</title><rect x="17.3697%" y="293" width="0.4963%" height="15" fill="rgb(226,81,46)" fg:x="70" fg:w="2"/><text x="17.6197%" y="303.50"></text></g><g><title>update_load_avg (1 samples, 0.25%)</title><rect x="17.6179%" y="277" width="0.2481%" height="15" fill="rgb(247,70,30)" fg:x="71" fg:w="1"/><text x="17.8679%" y="287.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.25%)</title><rect x="17.6179%" y="261" width="0.2481%" height="15" fill="rgb(212,68,19)" fg:x="71" fg:w="1"/><text x="17.8679%" y="271.50"></text></g><g><title>__perf_event_task_sched_in (20 samples, 4.96%)</title><rect x="18.1141%" y="309" width="4.9628%" height="15" fill="rgb(240,187,13)" fg:x="73" fg:w="20"/><text x="18.3641%" y="319.50">__perf..</text></g><g><title>perf_ctx_enable (20 samples, 4.96%)</title><rect x="18.1141%" y="293" width="4.9628%" height="15" fill="rgb(223,113,26)" fg:x="73" fg:w="20"/><text x="18.3641%" y="303.50">perf_c..</text></g><g><title>x86_pmu_enable (20 samples, 4.96%)</title><rect x="18.1141%" y="277" width="4.9628%" height="15" fill="rgb(206,192,2)" fg:x="73" fg:w="20"/><text x="18.3641%" y="287.50">x86_pm..</text></g><g><title>amd_pmu_enable_all (20 samples, 4.96%)</title><rect x="18.1141%" y="261" width="4.9628%" height="15" fill="rgb(241,108,4)" fg:x="73" fg:w="20"/><text x="18.3641%" y="271.50">amd_pm..</text></g><g><title>native_write_msr (20 samples, 4.96%)</title><rect x="18.1141%" y="245" width="4.9628%" height="15" fill="rgb(247,173,49)" fg:x="73" fg:w="20"/><text x="18.3641%" y="255.50">native..</text></g><g><title>asm_common_interrupt (4 samples, 0.99%)</title><rect x="23.0769%" y="309" width="0.9926%" height="15" fill="rgb(224,114,35)" fg:x="93" fg:w="4"/><text x="23.3269%" y="319.50"></text></g><g><title>common_interrupt (4 samples, 0.99%)</title><rect x="23.0769%" y="293" width="0.9926%" height="15" fill="rgb(245,159,27)" fg:x="93" fg:w="4"/><text x="23.3269%" y="303.50"></text></g><g><title>__common_interrupt (4 samples, 0.99%)</title><rect x="23.0769%" y="277" width="0.9926%" height="15" fill="rgb(245,172,44)" fg:x="93" fg:w="4"/><text x="23.3269%" y="287.50"></text></g><g><title>handle_fasteoi_irq (4 samples, 0.99%)</title><rect x="23.0769%" y="261" width="0.9926%" height="15" fill="rgb(236,23,11)" fg:x="93" fg:w="4"/><text x="23.3269%" y="271.50"></text></g><g><title>handle_irq_event (4 samples, 0.99%)</title><rect x="23.0769%" y="245" width="0.9926%" height="15" fill="rgb(205,117,38)" fg:x="93" fg:w="4"/><text x="23.3269%" y="255.50"></text></g><g><title>__handle_irq_event_percpu (4 samples, 0.99%)</title><rect x="23.0769%" y="229" width="0.9926%" height="15" fill="rgb(237,72,25)" fg:x="93" fg:w="4"/><text x="23.3269%" y="239.50"></text></g><g><title>usb_hcd_irq (4 samples, 0.99%)</title><rect x="23.0769%" y="213" width="0.9926%" height="15" fill="rgb(244,70,9)" fg:x="93" fg:w="4"/><text x="23.3269%" y="223.50"></text></g><g><title>ehci_irq (4 samples, 0.99%)</title><rect x="23.0769%" y="197" width="0.9926%" height="15" fill="rgb(217,125,39)" fg:x="93" fg:w="4"/><text x="23.3269%" y="207.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.25%)</title><rect x="24.0695%" y="245" width="0.2481%" height="15" fill="rgb(235,36,10)" fg:x="97" fg:w="1"/><text x="24.3195%" y="255.50"></text></g><g><title>tick_sched_timer (1 samples, 0.25%)</title><rect x="24.0695%" y="229" width="0.2481%" height="15" fill="rgb(251,123,47)" fg:x="97" fg:w="1"/><text x="24.3195%" y="239.50"></text></g><g><title>tick_sched_handle (1 samples, 0.25%)</title><rect x="24.0695%" y="213" width="0.2481%" height="15" fill="rgb(221,13,13)" fg:x="97" fg:w="1"/><text x="24.3195%" y="223.50"></text></g><g><title>update_process_times (1 samples, 0.25%)</title><rect x="24.0695%" y="197" width="0.2481%" height="15" fill="rgb(238,131,9)" fg:x="97" fg:w="1"/><text x="24.3195%" y="207.50"></text></g><g><title>scheduler_tick (1 samples, 0.25%)</title><rect x="24.0695%" y="181" width="0.2481%" height="15" fill="rgb(211,50,8)" fg:x="97" fg:w="1"/><text x="24.3195%" y="191.50"></text></g><g><title>perf_event_task_tick (1 samples, 0.25%)</title><rect x="24.0695%" y="165" width="0.2481%" height="15" fill="rgb(245,182,24)" fg:x="97" fg:w="1"/><text x="24.3195%" y="175.50"></text></g><g><title>perf_adjust_freq_unthr_context (1 samples, 0.25%)</title><rect x="24.0695%" y="149" width="0.2481%" height="15" fill="rgb(242,14,37)" fg:x="97" fg:w="1"/><text x="24.3195%" y="159.50"></text></g><g><title>x86_pmu_stop (1 samples, 0.25%)</title><rect x="24.0695%" y="133" width="0.2481%" height="15" fill="rgb(246,228,12)" fg:x="97" fg:w="1"/><text x="24.3195%" y="143.50"></text></g><g><title>amd_pmu_disable_event (1 samples, 0.25%)</title><rect x="24.0695%" y="117" width="0.2481%" height="15" fill="rgb(213,55,15)" fg:x="97" fg:w="1"/><text x="24.3195%" y="127.50"></text></g><g><title>amd_pmu_test_overflow_topbit (1 samples, 0.25%)</title><rect x="24.0695%" y="101" width="0.2481%" height="15" fill="rgb(209,9,3)" fg:x="97" fg:w="1"/><text x="24.3195%" y="111.50"></text></g><g><title>native_read_msr (1 samples, 0.25%)</title><rect x="24.0695%" y="85" width="0.2481%" height="15" fill="rgb(230,59,30)" fg:x="97" fg:w="1"/><text x="24.3195%" y="95.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.50%)</title><rect x="24.0695%" y="309" width="0.4963%" height="15" fill="rgb(209,121,21)" fg:x="97" fg:w="2"/><text x="24.3195%" y="319.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.50%)</title><rect x="24.0695%" y="293" width="0.4963%" height="15" fill="rgb(220,109,13)" fg:x="97" fg:w="2"/><text x="24.3195%" y="303.50"></text></g><g><title>__sysvec_apic_timer_interrupt (2 samples, 0.50%)</title><rect x="24.0695%" y="277" width="0.4963%" height="15" fill="rgb(232,18,1)" fg:x="97" fg:w="2"/><text x="24.3195%" y="287.50"></text></g><g><title>hrtimer_interrupt (2 samples, 0.50%)</title><rect x="24.0695%" y="261" width="0.4963%" height="15" fill="rgb(215,41,42)" fg:x="97" fg:w="2"/><text x="24.3195%" y="271.50"></text></g><g><title>tick_program_event (1 samples, 0.25%)</title><rect x="24.3176%" y="245" width="0.2481%" height="15" fill="rgb(224,123,36)" fg:x="98" fg:w="1"/><text x="24.5676%" y="255.50"></text></g><g><title>clockevents_program_event (1 samples, 0.25%)</title><rect x="24.3176%" y="229" width="0.2481%" height="15" fill="rgb(240,125,3)" fg:x="98" fg:w="1"/><text x="24.5676%" y="239.50"></text></g><g><title>lapic_next_event (1 samples, 0.25%)</title><rect x="24.3176%" y="213" width="0.2481%" height="15" fill="rgb(205,98,50)" fg:x="98" fg:w="1"/><text x="24.5676%" y="223.50"></text></g><g><title>native_write_msr (1 samples, 0.25%)</title><rect x="24.3176%" y="197" width="0.2481%" height="15" fill="rgb(205,185,37)" fg:x="98" fg:w="1"/><text x="24.5676%" y="207.50"></text></g><g><title>finish_task_switch.isra.0 (28 samples, 6.95%)</title><rect x="17.8660%" y="325" width="6.9479%" height="15" fill="rgb(238,207,15)" fg:x="72" fg:w="28"/><text x="18.1160%" y="335.50">finish_ta..</text></g><g><title>asm_sysvec_call_function_single (1 samples, 0.25%)</title><rect x="24.5658%" y="309" width="0.2481%" height="15" fill="rgb(213,199,42)" fg:x="99" fg:w="1"/><text x="24.8158%" y="319.50"></text></g><g><title>sysvec_call_function_single (1 samples, 0.25%)</title><rect x="24.5658%" y="293" width="0.2481%" height="15" fill="rgb(235,201,11)" fg:x="99" fg:w="1"/><text x="24.8158%" y="303.50"></text></g><g><title>native_apic_msr_eoi_write (1 samples, 0.25%)</title><rect x="24.5658%" y="277" width="0.2481%" height="15" fill="rgb(207,46,11)" fg:x="99" fg:w="1"/><text x="24.8158%" y="287.50"></text></g><g><title>newidle_balance (4 samples, 0.99%)</title><rect x="24.8139%" y="309" width="0.9926%" height="15" fill="rgb(241,35,35)" fg:x="100" fg:w="4"/><text x="25.0639%" y="319.50"></text></g><g><title>pick_next_task (6 samples, 1.49%)</title><rect x="24.8139%" y="325" width="1.4888%" height="15" fill="rgb(243,32,47)" fg:x="100" fg:w="6"/><text x="25.0639%" y="335.50"></text></g><g><title>pick_next_task_fair (2 samples, 0.50%)</title><rect x="25.8065%" y="309" width="0.4963%" height="15" fill="rgb(247,202,23)" fg:x="104" fg:w="2"/><text x="26.0565%" y="319.50"></text></g><g><title>newidle_balance (2 samples, 0.50%)</title><rect x="25.8065%" y="293" width="0.4963%" height="15" fill="rgb(219,102,11)" fg:x="104" fg:w="2"/><text x="26.0565%" y="303.50"></text></g><g><title>load_balance (1 samples, 0.25%)</title><rect x="26.0546%" y="277" width="0.2481%" height="15" fill="rgb(243,110,44)" fg:x="105" fg:w="1"/><text x="26.3046%" y="287.50"></text></g><g><title>activate_task (1 samples, 0.25%)</title><rect x="26.0546%" y="261" width="0.2481%" height="15" fill="rgb(222,74,54)" fg:x="105" fg:w="1"/><text x="26.3046%" y="271.50"></text></g><g><title>enqueue_task (1 samples, 0.25%)</title><rect x="26.0546%" y="245" width="0.2481%" height="15" fill="rgb(216,99,12)" fg:x="105" fg:w="1"/><text x="26.3046%" y="255.50"></text></g><g><title>enqueue_task_fair (1 samples, 0.25%)</title><rect x="26.0546%" y="229" width="0.2481%" height="15" fill="rgb(226,22,26)" fg:x="105" fg:w="1"/><text x="26.3046%" y="239.50"></text></g><g><title>enqueue_entity (1 samples, 0.25%)</title><rect x="26.0546%" y="213" width="0.2481%" height="15" fill="rgb(217,163,10)" fg:x="105" fg:w="1"/><text x="26.3046%" y="223.50"></text></g><g><title>__const_udelay (2 samples, 0.50%)</title><rect x="26.3027%" y="165" width="0.4963%" height="15" fill="rgb(213,25,53)" fg:x="106" fg:w="2"/><text x="26.5527%" y="175.50"></text></g><g><title>delay_tsc (2 samples, 0.50%)</title><rect x="26.3027%" y="149" width="0.4963%" height="15" fill="rgb(252,105,26)" fg:x="106" fg:w="2"/><text x="26.5527%" y="159.50"></text></g><g><title>ctx_sched_out (84 samples, 20.84%)</title><rect x="26.3027%" y="277" width="20.8437%" height="15" fill="rgb(220,39,43)" fg:x="106" fg:w="84"/><text x="26.5527%" y="287.50">ctx_sched_out</text></g><g><title>__pmu_ctx_sched_out (84 samples, 20.84%)</title><rect x="26.3027%" y="261" width="20.8437%" height="15" fill="rgb(229,68,48)" fg:x="106" fg:w="84"/><text x="26.5527%" y="271.50">__pmu_ctx_sched_out</text></g><g><title>group_sched_out (84 samples, 20.84%)</title><rect x="26.3027%" y="245" width="20.8437%" height="15" fill="rgb(252,8,32)" fg:x="106" fg:w="84"/><text x="26.5527%" y="255.50">group_sched_out</text></g><g><title>event_sched_out (84 samples, 20.84%)</title><rect x="26.3027%" y="229" width="20.8437%" height="15" fill="rgb(223,20,43)" fg:x="106" fg:w="84"/><text x="26.5527%" y="239.50">event_sched_out</text></g><g><title>x86_pmu_del (84 samples, 20.84%)</title><rect x="26.3027%" y="213" width="20.8437%" height="15" fill="rgb(229,81,49)" fg:x="106" fg:w="84"/><text x="26.5527%" y="223.50">x86_pmu_del</text></g><g><title>x86_pmu_stop (84 samples, 20.84%)</title><rect x="26.3027%" y="197" width="20.8437%" height="15" fill="rgb(236,28,36)" fg:x="106" fg:w="84"/><text x="26.5527%" y="207.50">x86_pmu_stop</text></g><g><title>amd_pmu_disable_event (84 samples, 20.84%)</title><rect x="26.3027%" y="181" width="20.8437%" height="15" fill="rgb(249,185,26)" fg:x="106" fg:w="84"/><text x="26.5527%" y="191.50">amd_pmu_disable_event</text></g><g><title>amd_pmu_test_overflow_topbit (82 samples, 20.35%)</title><rect x="26.7990%" y="165" width="20.3474%" height="15" fill="rgb(249,174,33)" fg:x="108" fg:w="82"/><text x="27.0490%" y="175.50">amd_pmu_test_overflow_topbit</text></g><g><title>native_read_msr (82 samples, 20.35%)</title><rect x="26.7990%" y="149" width="20.3474%" height="15" fill="rgb(233,201,37)" fg:x="108" fg:w="82"/><text x="27.0490%" y="159.50">native_read_msr</text></g><g><title>__const_udelay (1 samples, 0.25%)</title><rect x="47.1464%" y="229" width="0.2481%" height="15" fill="rgb(221,78,26)" fg:x="190" fg:w="1"/><text x="47.3964%" y="239.50"></text></g><g><title>__const_udelay (6 samples, 1.49%)</title><rect x="47.3945%" y="213" width="1.4888%" height="15" fill="rgb(250,127,30)" fg:x="191" fg:w="6"/><text x="47.6445%" y="223.50"></text></g><g><title>delay_tsc (6 samples, 1.49%)</title><rect x="47.3945%" y="197" width="1.4888%" height="15" fill="rgb(230,49,44)" fg:x="191" fg:w="6"/><text x="47.6445%" y="207.50"></text></g><g><title>amd_pmu_check_overflow (182 samples, 45.16%)</title><rect x="47.3945%" y="229" width="45.1613%" height="15" fill="rgb(229,67,23)" fg:x="191" fg:w="182"/><text x="47.6445%" y="239.50">amd_pmu_check_overflow</text></g><g><title>amd_pmu_test_overflow_topbit (176 samples, 43.67%)</title><rect x="48.8834%" y="213" width="43.6725%" height="15" fill="rgb(249,83,47)" fg:x="197" fg:w="176"/><text x="49.1334%" y="223.50">amd_pmu_test_overflow_topbit</text></g><g><title>native_read_msr (175 samples, 43.42%)</title><rect x="49.1315%" y="197" width="43.4243%" height="15" fill="rgb(215,43,3)" fg:x="198" fg:w="175"/><text x="49.3815%" y="207.50">native_read_msr</text></g><g><title>native_write_msr (7 samples, 1.74%)</title><rect x="92.5558%" y="229" width="1.7370%" height="15" fill="rgb(238,154,13)" fg:x="373" fg:w="7"/><text x="92.8058%" y="239.50"></text></g><g><title>prepare_task_switch (288 samples, 71.46%)</title><rect x="26.3027%" y="325" width="71.4640%" height="15" fill="rgb(219,56,2)" fg:x="106" fg:w="288"/><text x="26.5527%" y="335.50">prepare_task_switch</text></g><g><title>__perf_event_task_sched_out (288 samples, 71.46%)</title><rect x="26.3027%" y="309" width="71.4640%" height="15" fill="rgb(233,0,4)" fg:x="106" fg:w="288"/><text x="26.5527%" y="319.50">__perf_event_task_sched_out</text></g><g><title>perf_event_context_sched_out (288 samples, 71.46%)</title><rect x="26.3027%" y="293" width="71.4640%" height="15" fill="rgb(235,30,7)" fg:x="106" fg:w="288"/><text x="26.5527%" y="303.50">perf_event_context_sched_out</text></g><g><title>perf_ctx_disable (204 samples, 50.62%)</title><rect x="47.1464%" y="277" width="50.6203%" height="15" fill="rgb(250,79,13)" fg:x="190" fg:w="204"/><text x="47.3964%" y="287.50">perf_ctx_disable</text></g><g><title>x86_pmu_disable (204 samples, 50.62%)</title><rect x="47.1464%" y="261" width="50.6203%" height="15" fill="rgb(211,146,34)" fg:x="190" fg:w="204"/><text x="47.3964%" y="271.50">x86_pmu_disable</text></g><g><title>amd_pmu_disable_all (204 samples, 50.62%)</title><rect x="47.1464%" y="245" width="50.6203%" height="15" fill="rgb(228,22,38)" fg:x="190" fg:w="204"/><text x="47.3964%" y="255.50">amd_pmu_disable_all</text></g><g><title>x86_pmu_disable_all (14 samples, 3.47%)</title><rect x="94.2928%" y="229" width="3.4739%" height="15" fill="rgb(235,168,5)" fg:x="380" fg:w="14"/><text x="94.5428%" y="239.50">x86..</text></g><g><title>native_read_msr (14 samples, 3.47%)</title><rect x="94.2928%" y="213" width="3.4739%" height="15" fill="rgb(221,155,16)" fg:x="380" fg:w="14"/><text x="94.5428%" y="223.50">nat..</text></g><g><title>__schedule (327 samples, 81.14%)</title><rect x="16.8734%" y="341" width="81.1414%" height="15" fill="rgb(215,215,53)" fg:x="68" fg:w="327"/><text x="17.1234%" y="351.50">__schedule</text></g><g><title>psi_task_switch (1 samples, 0.25%)</title><rect x="97.7667%" y="325" width="0.2481%" height="15" fill="rgb(223,4,10)" fg:x="394" fg:w="1"/><text x="98.0167%" y="335.50"></text></g><g><title>psi_group_change (1 samples, 0.25%)</title><rect x="97.7667%" y="309" width="0.2481%" height="15" fill="rgb(234,103,6)" fg:x="394" fg:w="1"/><text x="98.0167%" y="319.50"></text></g><g><title>schedule_hrtimeout_range (328 samples, 81.39%)</title><rect x="16.8734%" y="389" width="81.3896%" height="15" fill="rgb(227,97,0)" fg:x="68" fg:w="328"/><text x="17.1234%" y="399.50">schedule_hrtimeout_range</text></g><g><title>schedule_hrtimeout_range_clock (328 samples, 81.39%)</title><rect x="16.8734%" y="373" width="81.3896%" height="15" fill="rgb(234,150,53)" fg:x="68" fg:w="328"/><text x="17.1234%" y="383.50">schedule_hrtimeout_range_clock</text></g><g><title>schedule (328 samples, 81.39%)</title><rect x="16.8734%" y="357" width="81.3896%" height="15" fill="rgb(228,201,54)" fg:x="68" fg:w="328"/><text x="17.1234%" y="367.50">schedule</text></g><g><title>dequeue_task (1 samples, 0.25%)</title><rect x="98.0149%" y="341" width="0.2481%" height="15" fill="rgb(222,22,37)" fg:x="395" fg:w="1"/><text x="98.2649%" y="351.50"></text></g><g><title>schedule_hrtimeout_range_clock (1 samples, 0.25%)</title><rect x="98.2630%" y="389" width="0.2481%" height="15" fill="rgb(237,53,32)" fg:x="396" fg:w="1"/><text x="98.5130%" y="399.50"></text></g><g><title>sock_poll (1 samples, 0.25%)</title><rect x="98.5112%" y="389" width="0.2481%" height="15" fill="rgb(233,25,53)" fg:x="397" fg:w="1"/><text x="98.7612%" y="399.50"></text></g><g><title>packet_poll (1 samples, 0.25%)</title><rect x="98.5112%" y="373" width="0.2481%" height="15" fill="rgb(210,40,34)" fg:x="397" fg:w="1"/><text x="98.7612%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (337 samples, 83.62%)</title><rect x="15.3846%" y="469" width="83.6228%" height="15" fill="rgb(241,220,44)" fg:x="62" fg:w="337"/><text x="15.6346%" y="479.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>do_syscall_64 (337 samples, 83.62%)</title><rect x="15.3846%" y="453" width="83.6228%" height="15" fill="rgb(235,28,35)" fg:x="62" fg:w="337"/><text x="15.6346%" y="463.50">do_syscall_64</text></g><g><title>__x64_sys_poll (337 samples, 83.62%)</title><rect x="15.3846%" y="437" width="83.6228%" height="15" fill="rgb(210,56,17)" fg:x="62" fg:w="337"/><text x="15.6346%" y="447.50">__x64_sys_poll</text></g><g><title>do_sys_poll (337 samples, 83.62%)</title><rect x="15.3846%" y="421" width="83.6228%" height="15" fill="rgb(224,130,29)" fg:x="62" fg:w="337"/><text x="15.6346%" y="431.50">do_sys_poll</text></g><g><title>do_poll.constprop.0 (335 samples, 83.13%)</title><rect x="15.8809%" y="405" width="83.1266%" height="15" fill="rgb(235,212,8)" fg:x="64" fg:w="335"/><text x="16.1309%" y="415.50">do_poll.constprop.0</text></g><g><title>srso_alias_safe_ret (1 samples, 0.25%)</title><rect x="98.7593%" y="389" width="0.2481%" height="15" fill="rgb(223,33,50)" fg:x="398" fg:w="1"/><text x="99.0093%" y="399.50"></text></g><g><title>pcap::capture::activated::&lt;impl pcap::capture::Capture&lt;T&gt;&gt;::next_packet (341 samples, 84.62%)</title><rect x="14.8883%" y="549" width="84.6154%" height="15" fill="rgb(219,149,13)" fg:x="60" fg:w="341"/><text x="15.1383%" y="559.50">pcap::capture::activated::&lt;impl pcap::capture::Capture&lt;T&gt;&gt;::next_packet</text></g><g><title>pcap_next_ex (341 samples, 84.62%)</title><rect x="14.8883%" y="533" width="84.6154%" height="15" fill="rgb(250,156,29)" fg:x="60" fg:w="341"/><text x="15.1383%" y="543.50">pcap_next_ex</text></g><g><title>[libpcap.so.1.10.1] (341 samples, 84.62%)</title><rect x="14.8883%" y="517" width="84.6154%" height="15" fill="rgb(216,193,19)" fg:x="60" fg:w="341"/><text x="15.1383%" y="527.50">[libpcap.so.1.10.1]</text></g><g><title>[libpcap.so.1.10.1] (340 samples, 84.37%)</title><rect x="15.1365%" y="501" width="84.3672%" height="15" fill="rgb(216,135,14)" fg:x="61" fg:w="340"/><text x="15.3865%" y="511.50">[libpcap.so.1.10.1]</text></g><g><title>__GI___poll (339 samples, 84.12%)</title><rect x="15.3846%" y="485" width="84.1191%" height="15" fill="rgb(241,47,5)" fg:x="62" fg:w="339"/><text x="15.6346%" y="495.50">__GI___poll</text></g><g><title>srso_alias_untrain_ret (2 samples, 0.50%)</title><rect x="99.0074%" y="469" width="0.4963%" height="15" fill="rgb(233,42,35)" fg:x="399" fg:w="2"/><text x="99.2574%" y="479.50"></text></g><g><title>[unknown] (402 samples, 99.75%)</title><rect x="0.0000%" y="581" width="99.7519%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="402"/><text x="0.2500%" y="591.50">[unknown]</text></g><g><title>esp_vtx_gs_rs::main (402 samples, 99.75%)</title><rect x="0.0000%" y="565" width="99.7519%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="402"/><text x="0.2500%" y="575.50">esp_vtx_gs_rs::main</text></g><g><title>std::time::SystemTime::elapsed (1 samples, 0.25%)</title><rect x="99.5037%" y="549" width="0.2481%" height="15" fill="rgb(254,173,49)" fg:x="401" fg:w="1"/><text x="99.7537%" y="559.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.25%)</title><rect x="99.5037%" y="533" width="0.2481%" height="15" fill="rgb(221,1,38)" fg:x="401" fg:w="1"/><text x="99.7537%" y="543.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.25%)</title><rect x="99.5037%" y="517" width="0.2481%" height="15" fill="rgb(206,124,46)" fg:x="401" fg:w="1"/><text x="99.7537%" y="527.50"></text></g><g><title>all (403 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="403"/><text x="0.2500%" y="623.50"></text></g><g><title>esp-vtx-gs-rs (403 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="403"/><text x="0.2500%" y="607.50">esp-vtx-gs-rs</text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.25%)</title><rect x="99.7519%" y="581" width="0.2481%" height="15" fill="rgb(235,61,29)" fg:x="402" fg:w="1"/><text x="100.0019%" y="591.50"></text></g><g><title>do_syscall_64 (1 samples, 0.25%)</title><rect x="99.7519%" y="565" width="0.2481%" height="15" fill="rgb(219,207,3)" fg:x="402" fg:w="1"/><text x="100.0019%" y="575.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.25%)</title><rect x="99.7519%" y="549" width="0.2481%" height="15" fill="rgb(222,56,46)" fg:x="402" fg:w="1"/><text x="100.0019%" y="559.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.25%)</title><rect x="99.7519%" y="533" width="0.2481%" height="15" fill="rgb(239,76,54)" fg:x="402" fg:w="1"/><text x="100.0019%" y="543.50"></text></g><g><title>exit_to_user_mode_loop (1 samples, 0.25%)</title><rect x="99.7519%" y="517" width="0.2481%" height="15" fill="rgb(231,124,27)" fg:x="402" fg:w="1"/><text x="100.0019%" y="527.50"></text></g><g><title>arch_do_signal_or_restart (1 samples, 0.25%)</title><rect x="99.7519%" y="501" width="0.2481%" height="15" fill="rgb(249,195,6)" fg:x="402" fg:w="1"/><text x="100.0019%" y="511.50"></text></g><g><title>get_signal (1 samples, 0.25%)</title><rect x="99.7519%" y="485" width="0.2481%" height="15" fill="rgb(237,174,47)" fg:x="402" fg:w="1"/><text x="100.0019%" y="495.50"></text></g><g><title>do_group_exit (1 samples, 0.25%)</title><rect x="99.7519%" y="469" width="0.2481%" height="15" fill="rgb(206,201,31)" fg:x="402" fg:w="1"/><text x="100.0019%" y="479.50"></text></g><g><title>do_exit (1 samples, 0.25%)</title><rect x="99.7519%" y="453" width="0.2481%" height="15" fill="rgb(231,57,52)" fg:x="402" fg:w="1"/><text x="100.0019%" y="463.50"></text></g><g><title>exit_mm (1 samples, 0.25%)</title><rect x="99.7519%" y="437" width="0.2481%" height="15" fill="rgb(248,177,22)" fg:x="402" fg:w="1"/><text x="100.0019%" y="447.50"></text></g><g><title>mmput (1 samples, 0.25%)</title><rect x="99.7519%" y="421" width="0.2481%" height="15" fill="rgb(215,211,37)" fg:x="402" fg:w="1"/><text x="100.0019%" y="431.50"></text></g><g><title>__mmput (1 samples, 0.25%)</title><rect x="99.7519%" y="405" width="0.2481%" height="15" fill="rgb(241,128,51)" fg:x="402" fg:w="1"/><text x="100.0019%" y="415.50"></text></g><g><title>exit_mmap (1 samples, 0.25%)</title><rect x="99.7519%" y="389" width="0.2481%" height="15" fill="rgb(227,165,31)" fg:x="402" fg:w="1"/><text x="100.0019%" y="399.50"></text></g><g><title>unmap_vmas (1 samples, 0.25%)</title><rect x="99.7519%" y="373" width="0.2481%" height="15" fill="rgb(228,167,24)" fg:x="402" fg:w="1"/><text x="100.0019%" y="383.50"></text></g><g><title>unmap_single_vma (1 samples, 0.25%)</title><rect x="99.7519%" y="357" width="0.2481%" height="15" fill="rgb(228,143,12)" fg:x="402" fg:w="1"/><text x="100.0019%" y="367.50"></text></g><g><title>unmap_page_range (1 samples, 0.25%)</title><rect x="99.7519%" y="341" width="0.2481%" height="15" fill="rgb(249,149,8)" fg:x="402" fg:w="1"/><text x="100.0019%" y="351.50"></text></g><g><title>zap_pmd_range.isra.0 (1 samples, 0.25%)</title><rect x="99.7519%" y="325" width="0.2481%" height="15" fill="rgb(243,35,44)" fg:x="402" fg:w="1"/><text x="100.0019%" y="335.50"></text></g><g><title>zap_pte_range (1 samples, 0.25%)</title><rect x="99.7519%" y="309" width="0.2481%" height="15" fill="rgb(246,89,9)" fg:x="402" fg:w="1"/><text x="100.0019%" y="319.50"></text></g></svg></svg>